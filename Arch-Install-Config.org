#+TITLE:2020-03-06-0224 Installing Arch on Raspi
#+Author: Sean Terrell

- tags ::
![Cases](https://covid19-badges.herokuapp.com/confirmed?long=true)
![Deaths](https://covid19-badges.herokuapp.com/deaths?long=true)
![Recovered](https://covid19-badges.herokuapp.com/recovered?long=true)

[[https://iot-survival.sandcats.io/shared/jVIolA33-85x5t7hCs9WEYXErqoRKo9lS6zCNra_a4a][Rocket.chat server]]   Join the conversation I know yall are bored!! lets talk IoTea!!


* Table of Contents :TOC:
- [[#prereqs][Prereqs]]
  - [[#installation--getting-started][Installation / getting Started]]
  - [[#software-you-should-clone-or-download][Software you should clone or Download]]
- [[#install-bootloader-and-os][Install Bootloader and OS]]
  - [[#pinn-is-a-bootloader-that-will-allow-ssh-and-vnc-at-boot-time][PINN is a bootloader that will allow SSH and VNC at boot time]]
  - [[#install-arch-linux][Install Arch Linux]]
  - [[#when-pi-boots-up-after-download-and-installation-of-arch][When PI Boots up, after download and installation of arch]]
  - [[#installing-essentials][Installing essentials]]
  - [[#now-we-are-getting-into-some-real-stuff---install-yay][Now we are getting into some real stuff - Install yay]]
  - [[#ok-after-yay-is-now-giving-us-access-to-the-aur-we-need-snapd][Ok after yay is now giving us access to the AUR we need Snapd]]
  - [[#to-configure-the-on-arch-we-have-to-find-the-installation][to configure the on arch we have to find the installation]]
  - [[#get-lxd-from-the-snapstore][Get lxd from the snapstore]]
  - [[#ok-add-alarm-user-to-lxd-group][Ok add alarm user to LXD group]]
  - [[#init-lxd][Init LXD]]
  - [[#spin-up-a-ubuntu-1804-container][spin up a ubuntu 18.04 container]]
  - [[#set-the-ip-routing-tables-for-any-ports-that-require-forwarding][Set the IP routing tables for any ports that require forwarding]]
  - [[#get-ssh-configured-and-a-word-about-ports][Get SSH configured and a word about ports]]
  - [[#install-codesys-runtime-onto-the][Install Codesys Runtime onto the]]
  - [[#git-hub-clone-iotstack-into-lxc][Git hub clone IOTStack into LXC]]
- [[#finally-after-the-docker-stack-is-up][Finally after the Docker stack is up]]

* Prereqs
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 05:08]
:END:
The following are necessary to be successful at the steps that follow
** Installation / getting Started
- Raspi 3 or better
- internet and  local network access (wireless or wired) for pi and eng workstation
- SD card for booting raspi
- SD card reader device
- VNC software installed [[https://www.realvnc.com/en/connect/download/viewer/][real VNC is free and works]]
- IP scanner (i like terminal apps and just arp-scan -l is great) [[https://angryip.org]]
- some patience and Luck

** Software you should clone or Download
:PROPERTIES:
:CREATED:  [2020-03-22 Sun 21:36]
:END:
- Https://github.com/PLCMercenary/IoT-Survival
- On Git Hub you should grab this repository - the one you are reading
  its convinient to have the installation README locally
- the IOT stack - git from this github
  https://github.com/PLCMercenary/IOTStack
  - This is the work of Mr Graham Gardner of South Africa.. I forked it with
    intention of packaging for the aur but then I learned about Linux containers
- We will be doing some pretty badass virtualization so if you dont know what
  LXD / LXC / and or Docker are.... you should read
- [[Codesys Raspi or Linux SL]   []]
* Install Bootloader and OS
:PROPERTIES:
:CREATED:  [2020-03-06 Fri 19:45]
:END:
** PINN is a bootloader that will allow SSH and VNC at boot time
:PROPERTIES:
:CREATED:  [2020-03-06 Fri 19:45]
:END:
- Download PINN [[https://sourceforge.net/projects/pinn/][here]]
- After downloading unzip the file and copy all the contents to the SD "/"
- Congrats PINN is installed

Ok while yes your raspi will boot into PINN now but it wont go any further
without input from YOU.

so you can either
a) connect raspi to a keyboard and mouse and monitor or
b) do the following.

- on the SD card, where you just pasted all the contents of the PINN folder.. find
  the file called recovery.cmdline
- append the following to the arguments (long list scroll to the right),
~forcetrigger~

And then

~vncshare~

this will cause the PINN bootloader to ALWAYS stop before booting even after an
OS is installed and will then set up the VNC connection to access the VNC
service

- Save the recovery.cmdline file, put the SD card in the Pi and give it some
  power
** Install Arch Linux
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 05:28]
:END:
- When your Pi boots, you need to find the IP address, so run an IP scanner and
  look for a locally connected device with the hostname "recovery"
- that will be the PINN bootloader on the PI

- Next open your Real VNC or other VNC client and connect to the Recovery IP on
  port 5900
  - Port 5900 is important.. its the only VNC port open

- You should be able to locate the Arch Linux installer in the PINN gui
- tick the checkbox to install arch
- then proceed to the menu with the install button and click that
- close real vnc and wait -- for a good while.. 30 mins plus with the slow NIC
  on the pi 3

** When PI Boots up, after download and installation of arch
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 05:37]
:END:
- again you are going to need to scan for the IP of the device, this time with
  the hostname alarm or alarmpi
- after locating the Pi, enter a terminal window on your engineering machine and
  ~SSH alarm@'ip-that-scanner-shows'~
- The two default users and passwords for arch linux ARMHF are

  | User  | Password |
  |-------+----------|
  | Alarm | alarm    |
  | Root  | root     |

** Installing essentials
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 06:04]
:END:
- Next we install Pacman, update / upgrade and install SUDO for root command
  access
- while SSH is connected login as root

- First execute the following commands over the SSH connection
  ~pacman-key â€“init~  this will init the pacman keyserver
  ~pacman-key -populate archlinuxarm~ this pulls the necessary gpg keys in for
  the armV(6,7,8) architecture
- =Next= upgrade your install with ~pacman -Syyu~
- After the upgrade is complete

- ~pacman -S sudo screen~ to install sudo and screen
  - ** Optionally install Fish shell and vim
    : pacman -S sudo screen fish vim
  - switch to the fish shell with ~fish~
- once those are complete, we have to edit the sudoers file to add alarm too it
#+BEGIN_SRC bash
vim /etc/sudoers.d/myOverrides
#+END_SRC
- then add ~alarm ALL=NOPASSWD: ALL~ to the sudoers file
- save the sudoers file and switch to the alarm user
  ~su alarm~

** Now we are getting into some real stuff - Install yay
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 06:16]
:END:
- Installing yay aur helper

  If you are not familiar with archlinux you arent going to be aware of the AUR
  and what an AUR helper is

  Without wasting alot of time there - the AUR is what makes Archlinux the best
  distro out there, its the Arch User Repository. Your normal package manager
  wont get packages there at all, so  we install a helper called yay
*** First Install Git
:PROPERTIES:
:CREATED:  [2020-03-06 Fri 02:27]
:END:
~sudo pacman -S git~

*** Then Git Clone
:PROPERTIES:
:CREATED:  [2020-03-06 Fri 02:30]
:END:
get yay and put it somewhere ~git clone https://aur.archlinux.org/yay.git/ \~
then
*** and build yay from that package
~cd yay~ and then ~ls~
observe that there is a =PKGBUILD= dir in the =~/yay= directory
execute the following command
~makepkg -si~ 
and observe that make begins running to makepkg of yay

** Ok after yay is now giving us access to the AUR we need Snapd
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 06:34]
:END:
- and we get that with ~$yay -S snapd~

** to configure the on arch we have to find the installation
:PROPERTIES:
:CREATED:  [2020-03-21 Sat 10:53]
:END:
- run command
  : whereis snapd
- the output should be ~/usr/bin/snapd~
- Then there are only two other things to configure
  : sudo systemctl enable --now snapd.socket
  + to start the snap service
  : ln -s /varr/bin/snapd/snap /snap
  + creates a symbolic link to snap directory from the root

** Get lxd from the snapstore
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 06:37]
:END:
Close to the end here
- Need to ~sudo snap install lxd~

** Ok add alarm user to LXD group
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 06:40]
:END:
#+BEGIN_SRC bash
sudo gpasswd -a alarm lxd
#+END_SRC
#+BEGIN_SRC bash
# to check the group addition
getent group lxd
# observe alarm added
#+END_SRC
- then log out and back in
  or ~newgrp lxd~

- Next check systemd to see if its running
~sudo systemctl status lxd~

if not
~sudo systemctl start lxd~


** Init LXD
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 06:48]
:END:
- the image clearly demonstrates that eth0 is the interface assigned with the IP
  address on my Pi

- [[file:./Installing-Arch-on-Raspi.org_imgs/20200314_065959_tZhN6i.png]]

 first get your pi ethernt device ID
  ~ifconfig~

- Now we can ~lxd init~

  [[file:./Installing-Arch-on-Raspi.org_imgs/20200314_070354_n1NqMp.png]]

  for each question you will NOT answer NO as in the IMAGE see below

  1) use clustering = NO

  2) new storage pool = Yes

  3) give it a name ? = "MowhawkSilence"

  4) name of backend = BTRFS is fine (or your choice zfs??)

  5) create new pool = YES

  6) connect MAAS server = NO

  7) new local bridge = yes

  8) connect to existing bridge = no 

  10) available over net? = no

  11) update stale images = as you wish

  12) yaml output printed = up to you


- after lxd is init we are ready to spin a container

** spin up a ubuntu 18.04 container
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 07:13]
:END:

- ~lxc launch ubuntu:19.10~
  - lxc will create the container and give it a name like "sweet-horse" or
    "pineberry-socks"

- you can see the status of lxc containers at any time with the command
  ~lxc list~ or ~lxc ls~

- you can enter these containers buy asking lxc to execute a command or by
  attaching the console after setting some permissions

- ~lxc config set <name> security.privileged true~
- ~lxc config set <name> security.nesting true~
- then we need to set the passwords on our container
  ~lxc exec <name> -- passwd root~
  ~lxc exec <name> -- passwd ubuntu~

- then you can attach to a console with
  ~lxc console <container name>~


** Set the IP routing tables for any ports that require forwarding
:PROPERTIES:
:CREATED:  [2020-03-21 Sat 21:19]
:END:
*** Â§220-0321-1706 IP-Table-routing-in-lxc
:PROPERTIES:
:CREATED:  [2020-03-21 Sat 21:21]
:END:


** TODO Get SSH configured and a word about ports
:PROPERTIES:
:CREATED:  [2020-03-22 Sun 15:54]
:END:

** TODO Install Codesys Runtime onto the
:PROPERTIES:
:CREATED:  [2020-03-22 Sun 15:54]
:END:

** TODO Git hub clone IOTStack into LXC
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 07:30]
:END:

 - ~LXC console x1~

 - ok ~git clone https://github.com/PLCMercenary/IOTstack.git \~ right onto the
   container
 - then ~cd IOTstack~ and do ~sudo ./menu.sh \~

 - a graphical menu will pop up and you should
   "install docker and docker compose"
   then reboot when directed too to so
#+BEGIN_QUOTE
NOTE NOTE NOTE
  When the Pi reboots its going to remain held in PINN bootloader because of the
  FORCETRIGGER we added

  Connect with your VNC program and all you have to do is click the EXIT button.
  Arch will boot directly straight away
#+END_QUOTE

 reattach your console

- ~lxc console x1~
- ~cd IOTstack~
- ~sudo ./menu.sh \~
- build stack
    - Portainer
    - Node-Red
    - Grafana
    - Mosquitto
    - Influx db

    - Pick some Node Red nodes to install

      ~docker-compose -up -d~

* Finally after the Docker stack is up
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 07:48]
:END:
Install the Codesys SL from the codesys software onto the LXC address??

*
:PROPERTIES:
:CREATED:  [2020-03-18 Wed 02:09]
:END:



