#+TITLE:2020-03-06-0224 Installing Arch on Raspi
#+Author: Sean Terrell

- tags ::

* Table of Contents :TOC:
- [[#prereqs][Prereqs]]
- [[#install-bootloader-and-os][Install Bootloader and OS]]
  - [[#pinn-is-a-bootloader-that-will-allow-ssh-and-vnc-at-boot-time][PINN is a bootloader that will allow SSH and VNC at boot time]]
  - [[#install-arch-linux][Install Arch Linux]]
  - [[#when-pi-boots-up-after-download-and-installation-of-arch][When PI Boots up, after download and installation of arch]]
  - [[#installing-essentials][Installing essentials]]
- [[#what-is-this-aur-thing-and-yay-sounds-hacker-ish-to-me][What is this AUR thing and Yay? sounds hacker-ish to me]]
- [[#installing-yay][Installing yay]]
  - [[#lets-get-the-snapstore-and-configure-it][Let's get the Snapstore and configure it]]
  - [[#lets-get-the-snapstore-from-the-aur][Let's get the Snapstore from the AUR]]
  - [[#get-lxd-from-the-snapstore][Get lxd from the snapstore]]
  - [[#ok-add-alarm-user-to-lxd-group][Ok add alarm user to LXD group]]
  - [[#init-lxd][Init LXD]]
  - [[#spin-up-a-ubuntu-1804-container][spin up a ubuntu 18.04 container]]
  - [[#configure-ssh-on-the-container][configure SSH on the container]]
- [[#iotstack-and-docker][IOTStack and Docker]]

* Prereqs
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 05:08]
:END:
The following are necessary to be successful at the steps that follow
- Raspi 3 or better
- internet and  local network access (wireless or wired) for pi and eng workstation
- SD card for booting raspi
- SD card reader device
- VNC software installed [[https://www.realvnc.com/en/connect/download/viewer/][real VNC is free and works]]
- IP scanner [[https://angryip.org]]
- some patience and luck

* Install Bootloader and OS
:PROPERTIES:
:CREATED:  [2020-03-06 Fri 19:45]
:END:
** PINN is a bootloader that will allow SSH and VNC at boot time
:PROPERTIES:
:CREATED:  [2020-03-06 Fri 19:45]
:END:
- Download PINN [[https://sourceforge.net/projects/pinn/][here]]
- After downloading unzip the file and copy all the contents to the SD "/"
- Congrats PINN is installed

Ok while yes your raspi will boot into PINN now but it wont go any further
without input from YOU.

so you can either
a) connect raspi to a keyboard and mouse and monitor or
b) do the following.

- on the SD card, where you just pasted all the contents of the PINN folder.. find
  the file called recovery.cmdline
- append the following to the arguments (long list scroll to the right),
~forcetrigger~

And then

~vncshare~

this will cause the PINN bootloader to ALWAYS stop before booting even after an
OS is installed and will then set up the VNC connection to access the VNC
service

- Save the recovery.cmdline file, put the SD card in the Pi and give it some
  power
** Install Arch Linux
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 05:28]
:END:
- When your Pi boots, you need to find the IP address, so run an IP scanner and
  look for a locally connected device with the hostname "recovery"
- that will be the PINN bootloader on the PI

- Next open your Real VNC or other VNC client and connect to the Recovery IP on
  port 5900
  - Port 5900 is important.. its the only VNC port open

- You should be able to locate the Arch Linux installer in the PINN gui
- tick the checkbox to install arch
- then proceed to the menu with the install button and click that
- close real vnc and wait -- for a good while.. 30 mins plus with the slow NIC
  on the pi 3

** When PI Boots up, after download and installation of arch
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 05:37]
:END:
- again you are going to need to scan for the IP of the device, this time with
  the hostname alarm or alarmpi
- after locating the Pi, enter a terminal window on your engineering machine and
  ~SSH alarm@'ip-that-scanner-shows'~
- The two default users and passwords for arch linux ARMHF are

  | User  | Password |
  |-------+----------|
  | Alarm | alarm    |
  | Root  | root     |

** Installing essentials
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 06:04]
:END:
- Next we install Pacman, update / upgrade and install SUDO for root command
  access
- while SSH is connected login as root

- First execute the following commands over the SSH connection
  : pacman-key â€“init
  this will init the pacman keyserver

  : pacman-key -populate archlinuxarm
  this pulls the necessary gpg keys in for the armV(6,7,8) architecture

- =Next= upgrade your install with
  : pacman -Syyu

- After the upgrade is complete

- install sudo and screen, optionally install fish shell, my favorite and vim
  text editor
  : pacman -S sudo screen fish vim

- once those are complete, we have to edit the sudoers file to add alarm too it

: vim /etc/sudoers.d/myOvrides

- install sudo and screen
  : pacman -S sudo screen

- once those are complete, we have to edit the sudoers file to add alarm too it
#+BEGIN_SRC bash
vim /etc/sudoers.d/myOvrides
#+END_SRC
- This will both create and open VIM to edit the file.
  adding
  : alarm ALL=NOPASSWD: ALL
  to the sudoers/myOverrides file gives sudo access from the main account

- save the sudoers file and switch to the alarm user
  : su alarm
  just so that you arent running as Root all the time

- Lets make sure everything seems ok with sudo
    We can quickly install one more essential package with
    : sudo pacman -S base-devel
    Using the "needed" flag will only grab applicable for your processor and not
  installed packages from this group
  : sudo pacman -S --needed base-devel

  This will be the first package to ask about which locations or builds to
  install. Stick with the default ALL


- Lets make sure everything seems ok with sudo
    We can quickly install one more essential package with
    : sudo pacman -S base-devel
    Using the "needed" flag will only grab applicable for your processor and not
  installed packages from this group
  : sudo pacman -S --needed base-devel

  This will be the first package to ask about which locations or builds to
  install. Stick with the default ALL

This is all of the essential Arch build - moving along we will get into some
deeper linux theory and containers

* What is this AUR thing and Yay? sounds hacker-ish to me
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 06:16]
:END:
 If you are not familiar with archlinux you arent going to be aware of the AUR
  and what an AUR helper is

  Without wasting alot of time there - the AUR is what makes Archlinux the best
  distro out there, its the Arch User Repository.

  Which requires further explination about.. but the [[https://wiki.archlinux.org/index.php/Arch_User_Repository][wiki]] is awesome and
  explains the AUR far better than I could
#+BEGIN_QUOTE
- From the Arch AUR [[https://wiki.archlinux.org/index.php/Arch_User_Repository][wiki]]

The Arch User Repository (AUR) is a community-driven repository for Arch users. It contains package descriptions (PKGBUILDs) that allow you to compile a package from source with makepkg and then install it via pacman. The AUR was created to organize and share new packages from the community and to help expedite popular packages' inclusion into the community repository. This document explains how users can access and utilize the AUR.
#+END_QUOTE

Your normal package manager wont install these pkgbuild binaries so its alot
  easier to install an AUR helper that can search the AUR and install pkgs that
  pacman need built and checked first

* Installing yay

While there are several different AUR helpers, each with their own "flavor" or
bennefit for using, Yay is a highly recommended helper that uses the same syntax
as pacman and reduces the learning curve on making packages from source.

*** First Install Git
:PROPERTIES:
:CREATED:  [2020-03-06 Fri 02:27]
:END:
We need to get yay from a git repo.

: sudo pacman -S git

*** Then Clone yay
:PROPERTIES:
:CREATED:  [2020-03-06 Fri 02:30]
:END:
get yay from GIT and clone it to a directory
   : git clone https://aur.archlinux.org/yay.git/
The Command above will clone yay into the directory
   : cd ~/yay
and ~ls~ will reveal a =PKGBUILD= object in yay dir

*** Build yay
execute the following command
: makepkg -si
and observe that make begins running to makepkg of yay

This one is going to take a bit

** Let's get the Snapstore and configure it
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 06:34]
:END:
Yay is going in use right away to install snapstore
: $ yay -S snapd

Then we start the systemd service for snaps
: sudo systemctl enable --now snapd.socket

last we make a symlink to the snapstore

:  sudo ln -s /var/lib/shapd/snap /snap

and we are good to run snaps
** Let's get the Snapstore from the AUR
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 06:34]
:END:
Yay is going in use right away to instal snapstore
: $ yay -S snapd

** Get lxd from the snapstore
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 06:37]
:END:
Close to the end here
- Need to ~sudo snapd install lxd~

** Ok add alarm user to LXD group
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 06:40]
:END:
#+BEGIN_SRC bash
sudo gpasswd -a alarm lxd
#+END_SRC
#+BEGIN_SRC bash
# to check the group addition
getent group lxd
# observe alarm added
#+END_SRC
- then log out and back in
  or ~newgrp lxd~

- Next check systemd to see if its running
: sudo systemctl status lxd

if not
: sudo systemctl start lxd


** Init LXD
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 06:48]
:END:
- first get your pi ethernet device ID
  : ifconfig

 [[file:./Installing-Arch-on-Raspi.org_imgs/20200314_065959_tZhN6i.png]]

- the image clearly demonstrates that eth0 is the interface assigned with the IP
  address on my Pi

- Now we can
  : lxd init

  [[file:./Installing-Arch-on-Raspi.org_imgs/20200314_070354_n1NqMp.png]]

  for each question you will NOT answer NO as in the IMAGE: see below

  1) use clustering = NO

  2) new storage pool = Yes

  3) give it a name ? = MowhawkSilence

  4) name of backend = BTRFS is fine (or your choice zfs??)

  5) create new pool = YES

  6) connect MAAS server = NO

  7) new local bridge = yes

- optionally say no to bridge and point directly at your eth port
       7.A) connect to existing bridge = yes

       7.B) which one = eth0 (or the network interface noted above)

  8) what should bridge be named = lxdbr0

  9) available over net? = no

  10) update stale images = as you wish

  11) yaml output printed = up to you


- after lxd is init we are ready to spin a container

** spin up a ubuntu 18.04 container
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 07:13]
:END:

So this theoricically should work with "any" Debian based distro
Codesys uses SSH and SFTP to install a .deb package onto your linux device. this
is why it cannot install directly to the archlinux. use command
~lxc image list images:~ for a list of all publically hosted Linux containers


 : lxc launch ubuntu:18.04
#+BEGIN_COMMENT
I am writing this in march 2020, with the Ubuntu LTS realese for 20.04 right
around the corner, its likely preferable that you use the latest LTS vs 18.04
#+END_COMMENT

  - lxc will create the container and give it a name like "sweet-horse" or
    "pineberry-socks"

#+BEGIN_COMMENT
Leaving the final arguement of no name is usually not a bad thing, as the LXC
daemon will assign a name automatically, however these can get annoyingly long
to type when doing lots of configuration or - as in this case I have been
troubleshooting quite a bit, I recommend using something like c1 or d1 and u1
for debian and ubuntu.. anything that isnt going to hold you up typing it
#+END_COMMENT


- you can see the status of lxc containers at any time with the command
  ~lxc list~ or ~lxc ls~

- you can enter these containers buy asking lxc to execute a command or by
  attaching the console after setting some permissions

: lxc config set <name> security.privileged true
: lxc config set <name> security.nesting true
- then we need to set the passwords on our container
 : lxc exec <name> -- passwd root
 : lxc exec <name> -- passwd ubuntu

- then you can attach to a console with
: lxc console <container name>

** TODO configure SSH on the container
:PROPERTIES:
:CREATED:  [2020-03-24 Tue 03:11]
:END:
If using ubuntu container this is fairly easy



* IOTStack and Docker
:PROPERTIES:
:CREATED:  [2020-03-14 Sat 07:30]
:END:

 - ~LXC console x1~

 - ok ~git clone https://github.com/PLCMercenary/IOTstack.git \~ right onto the
   container
 - then ~cd IOTstack~ and do ~sudo ./menu.sh \~

 - a graphical menu will pop up and you should
   "install docker and docker compose"
   then reboot when directed too to so
#+BEGIN_QUOTE
NOTE NOTE NOTE
  When the Pi reboots its going to remain held in PINN bootloader because of the
  FORCETRIGGER we added

  Connect with your VNC program and all you have to do is click the EXIT button.
  Arch will boot directly straight away
#+END_QUOTE

 reattach your console

- ~lxc console x1~
- ~cd IOTstack~
- ~sudo ./menu.sh \~
- build stack
    - Portainer
    - Node-Red
    - Grafana
    - Mosquitto
    - Influx db

    - Pick some Node Red nodes to install

      ~docker-compose -up -d~:
